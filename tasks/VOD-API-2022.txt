Server side
	Connection : (c'est une classe Unicast remote object qui implémente des méthodes définies dans une RMI interface)
		Array clientList;
		xxx Movies;
		boolean signUp (String mail, String pwd) throws SignInFailed; (eg, if a client with this email already exists)
		//to make it a RMI method, you also have to announce RemoteException could be thrown, this means signature is:
			// boolean signUp (String mail, String pwd) throws RemoteException, SignInFailed;
		IVODService login(String mail, String pwd) throws InvalidCredentialsException; (if mail/pwd don't match)
		
	VODService : (c'est une classe Unicast remote object qui implémente ces méthodes définies dans une RMI interface)
		List<MovieDesc> viewCatalog();
		Bill playmovie(String isbn, IClientBox box);
	Bill :
		String movieName;
		BigInteger outrageousPrice; (<-- it may not be that big)
	MovieDesc :
		String movieName;
		String isbn;
		String synopsis;
	
	MovieDescExtended extends MovieDesc :
		[]bytes teaser;
Client side
	ClientBox (c'est un Unicast remote object qui implémente une interface RMI exposant ) :
		void stream([]bytes chunck);
The Flow
	1. Le client s'inscrit (si besoin).
	2. Le client se connecte pour récupérer le service de VOD.
	3. Le client appelle viewCatalog() pour récupérer les descriptions des films. (On suppose que le serveur se lance avec un catalogue
             de films prédéfini, et pour chaque film , une description de la classe MovieDesc). 
	     Pour ceux intéressés par faire le bonus: 
		on suppose que dans le catalogue, (certains) des films disposent également d'une description selon MovieDescExtended. 
	4. Il affiche dans la console la liste des films : pour cela il affiche
           le synopsis, et, si c'est un MovieDescExtended, il joue (automatiquement) la bande-annonce, 
		et propose à l'utilisateur de choisir un film
	5. Quand un film est sélectionné dans la console coté client, le client appelle playMovie(...):
		5a. Le serveur envoie le premier bloc du film, en appellant la méthode stream(...) du client, lui fournissant le début du film (qui
			sera affiché sur la sortie standard coté client).
        	5b. Le serveur lance un thread localement pour continuer à streamer les autres blocs les uns à la suite des autres, appelant stream(...)
		5c. Le serveur renvoie la facture en guise de return de la méthode playMovie.

-----------------------------------------------------------------------------------------------------------------
Del lado del servidor
	Conexión: (se trata de una clase de objeto remoto Unicast que implementa métodos definidos en una interfaz RMI)
		Array clientList;
		xxx Películas;
		boolean signUp (String mail, String pwd) throws SignInFailed; (por ejemplo, si ya existe un cliente con este correo)
		//para que sea un método RMI, también tiene que anunciar RemoteException podría ser lanzado, esto significa que la firma es:
			// boolean signUp (String mail, String pwd) throws RemoteException, SignInFailed;
		IVODService login(String mail, String pwd) throws InvalidCredentialsException; (si mail/pwd no coinciden)
		
	VODService: (es una clase de objeto remoto Unicast que implementa los métodos definidos en una interfaz RMI)
		List<MovieDesc> viewCatalog();
		Bill playmovie(String isbn, IClientBox box);
	Proyecto de ley :
		Cadena movieName;
		BigInteger outrageousPrice; (<-- puede que no sea tan grande)
	MovieDesc :
		Cadena movieName;
		String isbn;
		Sinopsis de la cadena;
	
	MovieDescExtended extiende MovieDesc :
		[]bytes teaser;
Parte del cliente
	ClientBox (es un objeto remoto Unicast que implementa una interfaz de exponente RMI) :
		void stream([]bytes chunck);
El flujo
	1. El cliente se registra (si es necesario).
	2. El cliente se conecta para recuperar el servicio VOD.
	3. El cliente llama a viewCatalog() para recuperar las descripciones de las películas.
             de películas, y para cada película, una descripción de la clase MovieDesc). 
	     Para los interesados en hacer la bonificación: 
		se supone que en el catálogo (algunas de) las películas también tienen una descripción según MovieDescExtended. 
	4. Muestra la lista de películas en la consola: para ello muestra
           la sinopsis y, si es un MovieDescExtended, reproduce (automáticamente) el tráiler, 
		y ofrece al usuario la posibilidad de elegir una película
	5. Cuando se selecciona una película en la consola del lado del cliente, éste llama a playMovie(...):
		5a. El servidor envía el primer bloque de la película, llamando al método stream(...) del cliente, proporcionándole el comienzo de la película (que se mostrará en la salida estándar del cliente).
			(que se mostrará en la salida estándar del cliente).
        	5b. El servidor inicia un hilo localmente para seguir transmitiendo los otros bloques uno tras otro, llamando a stream(...)
		5c. El servidor devuelve la factura como retorno del método playMovie.

Traducción realizada con la versión gratuita del traductor www.DeepL.com/Translator
